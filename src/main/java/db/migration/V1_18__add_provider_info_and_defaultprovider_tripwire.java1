package db.migration;

import java.sql.PreparedStatement;
import java.sql.Statement;
import lombok.extern.slf4j.Slf4j;
import lombok.val;
import org.flywaydb.core.api.migration.BaseJavaMigration;
import org.flywaydb.core.api.migration.Context;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.SingleConnectionDataSource;
import org.springframework.stereotype.Component;

// TODO: retaining this file, may be used with https://github.com/overture-stack/ego/issues/527
@Component
@Slf4j
public class V1_18__add_provider_info_and_defaultprovider_tripwire extends BaseJavaMigration {

  private static String sanitizeSQLVariable(String variable) {
    return variable.trim().replaceAll("\\s.*", "");
  }

  @Override
  public void migrate(Context context) throws Exception {
    log.info(
        "Flyway java migration: V1_18__add_identity_provider_and_provider_tripwire running ******************************");

    val configuration = context.getConfiguration();
    val placeholders = configuration.getPlaceholders();
    // this will work for the migration, but not for testcontainers
    val defaultProviderType = placeholders.get("defaultprovider");

    val singleConnection =
        new JdbcTemplate(new SingleConnectionDataSource(context.getConnection(), true));
    try (Statement connection = context.getConnection().createStatement()) {
      connection.execute("ALTER TABLE egouser ALTER COLUMN email DROP NOT NULL;");
      connection.execute("ALTER TABLE egouser DROP CONSTRAINT egouser_email_key;");
      connection.execute("ALTER TABLE egouser ALTER COLUMN name DROP NOT NULL;");
      connection.execute("ALTER TABLE egouser DROP CONSTRAINT egouser_name_key;");

      connection.execute(
          "CREATE TYPE providerType AS ENUM('GOOGLE', 'FACEBOOK', 'LINKEDIN', 'GITHUB', 'ORCID');");
      connection.execute("ALTER TABLE egouser ADD COLUMN providertype providerType;");

      try (PreparedStatement update =
          context
              .getConnection()
              .prepareStatement(
                  "ALTER TABLE egouser ALTER COLUMN providertype SET DEFAULT '"
                      + sanitizeSQLVariable(defaultProviderType)
                      + "';")) {
        update.executeUpdate();
      }

      //      try (PreparedStatement update =
      //          context
      //              .getConnection()
      //              .prepareStatement("ALTER TABLE egouser ALTER COLUMN providertype SET DEFAULT
      // ?;")) {
      //
      //        checkState(defaultProviderType != null, "IS NULL");
      //        update.setString(1, defaultProviderType);
      //        update.executeUpdate();
      //      }

      // default values are not added to existing rows, need to explicitly update where providertype
      // is NULL
      connection.execute("UPDATE egouser SET providertype = DEFAULT WHERE providertype IS NULL;");

      // then set not null constraint
      connection.execute("ALTER TABLE egouser ALTER COLUMN providertype SET NOT NULL;");
      connection.execute("ALTER TABLE egouser ADD COLUMN providerid VARCHAR(255);");
      connection.execute("UPDATE egouser SET providerid = email WHERE providerid IS NULL;");
      connection.execute("ALTER TABLE egouser ALTER COLUMN providerid SET NOT NULL;");
      connection.execute("ALTER TABLE egouser ADD UNIQUE(providertype, providerid);");
    }

    // create tripwire table
    try (Statement connection = context.getConnection().createStatement()) {
      connection.execute("CREATE TABLE defaultprovidertripwire(defaultprovider VARCHAR(255));");
      try (PreparedStatement update =
          context
              .getConnection()
              .prepareStatement("INSERT INTO defaultprovidertripwire VALUES (?)")) {

        update.setString(1, defaultProviderType);
        update.executeUpdate();
      }
    }

    log.info(
        "****************************** Flyway java migration: V1_18__add_identity_provider_and_provider_tripwire complete");
  }
}
