server:
  port: 8081
  servlet:
    session:
      persistent: false

login:
  nonce:
    name: LOGIN_NONCE
    sameSite: none
    secure: true
    maxAge: 120
    domainPattern: ^.+?\.(\w+\.[a-z]+)$

jwt:
  secret: testsecretisalsoasecret
  user:
    durationMs: 10800000 #in milliseconds 10800000 = 3hrs, max = 2147483647
  app:
    durationMs: 10800000

apitoken:
  durationDays: 365 # in days

refreshToken:
  durationMs: 43200000 # in milliseconds = 12hrs
  cookieIsSecure: false
  domain: localhost

# security
auth:
  token:
    prefix:

spring.main.allow-bean-definition-overriding: true

# Datasource
spring.datasource:
  driver-class-name: org.postgresql.Driver
  url: jdbc:postgresql://localhost:5432/ego?stringtype=unspecified
  username: postgres
  password: password
  max-active: 10
  max-idle: 1
  min-idle: 1

spring:
  security:
    oauth2:
      client:
        registration:
          google:
            clientName: ego
            clientId: ego-client
            clientSecret:
            authorizationGrantType: authorization_code
            clientAuthenticationMethod: post
            redirectUri: "http://localhost:8081/oauth/code/google"
            scope:
              - openid
              - email
              - profile

          github:
            clientName: ego
            clientId: ego-client
            clientSecret:
            redirectUri: "http://localhost:8081/oauth/code/github"
            clientAuthenticationMethod: post
            authorizationGrantType: authorization_code
            scope:
              - "read:user"
              - "user:email"

          linkedin:
            clientName: ego-client
            clientId: ego-client
            clientSecret:
            authorizationGrantType: authorization_code
            redirectUri: "http://localhost:8081/oauth/code/linkedin"
            scope:
              - "r_liteprofile"
              - "r_emailaddress"

          orcid:
            clientId: ego-client
            clientSecret:
            redirectUri: "http://localhost:8081/oauth/code/orcid"
            authorizationGrantType: authorization_code
            scope: "openid"

          keycloak:
            clientId: ego-client
            clientSecret:
            redirectUri: "http://localhost:8081/oauth/code/keycloak"
            authorizationGrantType: authorization_code
            scope:
              - email
              - profile
              - openid

        provider:
          keycloak:
            authorizationUri: http://localhost:8083/auth/realms/master/protocol/openid-connect/auth
            userInfoUri: http://localhost:8083/auth/realms/master/protocol/openid-connect/userinfo
            tokenUri: http://localhost:8083/auth/realms/master/protocol/openid-connect/token
            jwkSetUri: http://localhost:8083/auth/realms/master/protocol/openid-connect/certs
            userNameAttribute: sub
          linkedin:
            authorizationUri: https://www.linkedin.com/oauth/v2/authorization
            userInfoUri: https://api.linkedin.com/v2/me
            tokenUri: https://www.linkedin.com/oauth/v2/accessToken
            userNameAttribute: localizedFirstName
            userEmailUri: https://api.linkedin.com/v2/clientAwareMemberHandles?q=members&projection=(elements*(primary,type,handle~))
          orcid:
            tokenUri: https://orcid.org/oauth/token
            authorizationUri: https://orcid.org/oauth/authorize
            userInfoUri: https://orcid.org/oauth/userinfo
            userNameAttribute: sub
            userRecordUri: https://pub.orcid.org/v2.0
            jwkSetUri: https://orcid.org/oauth/jwks
  cloud:
    vault:
      enabled: false
  flyway:
    enabled: true
    locations: "classpath:flyway/sql,classpath:db/migration"
    placeholders:
      default-provider: GOOGLE
  jackson:
    deserialization:
      FAIL_ON_UNKNOWN_PROPERTIES: false
      FAIL_ON_NULL_FOR_PRIMITIVES: true
      FAIL_ON_NUMBERS_FOR_ENUMS: true
      FAIL_ON_READING_DUP_TREE_KEY: true


# set this flag in Spring 2.0 because of this open issue: https://hibernate.atlassian.net/browse/HHH-12368
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation: true
log4j:
  logger:
    org:
      hibernate: TRACE

oauth:
  redirectFrontendUri: http://localhost:3501

# Logging settings.
logging:
  console:
    enabled: true
    threshold: ALL
  loggers:
    "org.skife.jdbi.v2": TRACE
  level:
    root: INFO
    #org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG
    #org.springframework.boot: INFO
    bio.overture.ego: INFO

# Hibernate SQL Debugging
#spring.jpa.properties.hibernate.format_sql: true
#logging.level.org.hibernate.SQL: DEBUG
#logging.level.org.hibernate.type.descriptor.sql: TRACE

# When you are desperate, use this...
#logging.level.org.hibernate: TRACE

token:
  private-key:
  public-key:

# Default values available for creation of entities
default:
  user:
    # flag to automatically register first user as an admin
    firstUserAsAdmin: false
    type: USER
    status: APPROVED

initialization:
  enabled: false
  applications:
    - name: my-app
      type: ADMIN
      clientId: myClientId
      clientSecret: myClientSecret123
      redirectUri: https://example.org  # optional
      description: Some description about this application  # optional

---
###############################################################################
# Profile - "jks"
###############################################################################
spring:
  config:
    activate:
      on-profile: jks

token:
  key-store: src/main/resources/ego-jwt.jks
  key-alias: ego-jwt
  keystore-password: eG0tistic@lly

---
###############################################################################
# Profile - "auth"
###############################################################################
spring:
  config:
    activate:
      on-profile: auth

# security
auth:
  token:
    prefix: Bearer

# Logging settings.
logging:
  console:
    enabled: true
    threshold: ALL
  loggers:
    "org.skife.jdbi.v2": TRACE

---
###############################################################################
# Profile - "demo"
###############################################################################
spring:
  config:
    activate:
      on-profile: grpc

grpc:
  port: 50051

---
###############################################################################
# Profile - "demo"
###############################################################################
spring:
  config:
    activate:
      on-profile: demo
---
###############################################################################
# Profile - "test"
###############################################################################
spring:
  config:
    activate:
      on-profile: test

# To log the httpRequests and httpResponses for the controllers, set to true
logging.test.controller.enable: false

spring.datasource:
  driver-class-name: org.testcontainers.jdbc.ContainerDatabaseDriver
  url: jdbc:tc:postgresql:12.6://localhost:5432/ego?TC_INITFUNCTION=bio.overture.ego.test.FlywayInit::initTestContainers

  username: postgres
  password:
  max-active: 1000
  max-idle: 10
  min-idle: 1
