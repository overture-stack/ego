server:
  port: 8081
  servlet:
    session:
      persistent: false

login:
  nonce:
    name: LOGIN_NONCE
    sameSite: none
    secure: true
    maxAge: 120
    domainPattern: ^.+?\.(\w+\.[a-z]+)$

jwt:
  secret: testsecretisalsoasecret
  user:
    durationMs: 10800000 #in milliseconds 10800000 = 3hrs, max = 2147483647
  app:
    durationMs: 10800000

apitoken:
  durationDays: 365 # in days

refreshToken:
  durationMs: 43200000 # in milliseconds = 12hrs
  cookieIsSecure: false
  domain: localhost

# Swagger
springdoc:
  packagesToScan: bio.overture.ego.controller
  swagger-ui:
    display-operation-id: true
    doc-expansion: none # initial collapse groups
    operations-sorter: alpha
    tags-sorter: alpha

# security
auth:
  token:
    prefix:

spring.main.allow-bean-definition-overriding: true

# Datasource
spring.datasource:
  driver-class-name: org.postgresql.Driver
  url: jdbc:postgresql://localhost:5432/ego?stringtype=unspecified
  username: postgres
  password: password
  max-active: 10
  max-idle: 1
  min-idle: 1

spring:
  security:
    oauth2:
      client:
        registration:
          google:
            provider: google
            clientName: ego
            clientId: ego-client
            clientSecret:
            authorizationGrantType: authorization_code
            clientAuthenticationMethod: client_secret_post
            redirectUri: "http://localhost:8081/oauth/code/google"
            scope:
              - openid
              - email
              - profile

          github:
            clientName: ego
            clientId: ego-client
            clientSecret:
            redirectUri: "http://localhost:8081/oauth/code/github"
            clientAuthenticationMethod: client_secret_post
            authorizationGrantType: authorization_code
            scope:
              - "read:user"
              - "user:email"

          linkedin:
            clientName: ego-client
            clientId: ego-client
            clientSecret:
            authorizationGrantType: authorization_code
            redirectUri: "http://localhost:8081/oauth/code/linkedin"
            scope:
              - "r_liteprofile"
              - "r_emailaddress"

          orcid:
            clientId: ego-client
            clientSecret:
            redirectUri: "http://localhost:8081/oauth/code/orcid"
            authorizationGrantType: authorization_code
            scope: "openid"

          keycloak:
            clientId: ego-client
            clientSecret:
            redirectUri: "http://localhost:8081/oauth/code/keycloak"
            authorizationGrantType: authorization_code
            scope:
              - email
              - profile
              - openid

        provider:
          keycloak:
            authorizationUri: http://localhost:8083/auth/realms/master/protocol/openid-connect/auth
            userInfoUri: http://localhost:8083/auth/realms/master/protocol/openid-connect/userinfo
            tokenUri: http://localhost:8083/auth/realms/master/protocol/openid-connect/token
            jwkSetUri: http://localhost:8083/auth/realms/master/protocol/openid-connect/certs
            userNameAttribute: sub
          linkedin:
            authorizationUri: https://www.linkedin.com/oauth/v2/authorization
            userInfoUri: https://api.linkedin.com/v2/me
            tokenUri: https://www.linkedin.com/oauth/v2/accessToken
            userNameAttribute: localizedFirstName
            userEmailUri: https://api.linkedin.com/v2/clientAwareMemberHandles?q=members&projection=(elements*(primary,type,handle~))
          orcid:
            tokenUri: https://orcid.org/oauth/token
            authorizationUri: https://orcid.org/oauth/authorize
            userInfoUri: https://orcid.org/oauth/userinfo
            userNameAttribute: sub
            userRecordUri: https://pub.orcid.org/v2.0
            jwkSetUri: https://orcid.org/oauth/jwks
  cloud:
    vault:
      kv:
        backend: kv
        enabled: true
  flyway:
    enabled: true
    locations: "classpath:flyway/sql,classpath:db/migration"
    placeholders:
      default-provider: GOOGLE
  jackson:
    date-format: yyyy-MM-dd'T'HH:mm:ss.SSSZ
    deserialization:
      FAIL_ON_UNKNOWN_PROPERTIES: false
      FAIL_ON_NULL_FOR_PRIMITIVES: true
      FAIL_ON_NUMBERS_FOR_ENUMS: true
      FAIL_ON_READING_DUP_TREE_KEY: true


# set this flag in Spring 2.0 because of this open issue: https://hibernate.atlassian.net/browse/HHH-12368
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation: true
log4j:
  logger:
    org:
      hibernate: TRACE

oauth:
  redirectFrontendUri: http://localhost:3501

# Logging settings.
logging:
  console:
    enabled: true
    threshold: ALL
  loggers:
    "org.skife.jdbi.v2": TRACE
  level:
    root: INFO
    #org.springframework.web.filter.CommonsRequestLoggingFilter: DEBUG
    #org.springframework.boot: INFO
    bio.overture.ego: INFO

# Hibernate SQL Debugging
#spring.jpa.properties.hibernate.format_sql: true
#logging.level.org.hibernate.SQL: DEBUG
#logging.level.org.hibernate.type.descriptor.sql: TRACE

# When you are desperate, use this...
#logging.level.org.hibernate: TRACE

token:
  issuer: http://localhost:8081
  private-key: MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDSU6oy48sJW6xzqzOSU1dAvUUeFKQSBHsCf7wGWUGpOxEczhtFiiyx4YUJtg+fyvwWxa4wO3GnQLBPIxBHY8JsnvjQN2lsTUoLqMB9nGpwF617uA/S2igm1u+cDpfi82kbi6SG1Sg30PM047R6oxTRGDLLkeMRF1gRaTBM0HfSL0j6ccU5KPgwYsFLE2We6jeR56iYJGC2KYLH4v8rcc2jRAdMbUntHMtUByF9BPSW7elQnyQH5Qzr/o0b59XLKwnJFn2Bp2yviC8cdyTDyhQGna0e+oESQR1j6u3Ux/mOmm3slRXscA8sH+pHmOEAtjYVf/ww36U8uZv+ctBCJyFVAgMBAAECggEBALrEeJqAFUfWFCkSmdUSFKT0bW/svFUTjXgGnZy1ncz9GpENpMH3lQDQVibteKpYwcom+Cr0XlQ66VUcudPrDjcOY7vhuMfnSh1YWLYyM4IeRHtcUxDVkFoM+vEFNHLf2zIOqqbgmboW3iDVIurT7iRO7KxAe/YtWJL9aVqMtBn7Lu7S7OvAU4ji5iLIBxjl82JYA+9lu/aQ6YGaoZuSO7bcU8Sivi+DKAahqN9XMKiB1XpC+PpaS/aec2S7xIlTdzoDGxEALRGlMe+xBEeQTBVJHBWrRIDPoHLTREeRC/9Pp+1Y4Dz8hd5Bi0n8/5r/q0liD+0vtmjsdU4E2QrktYECgYEA73qWvhCYHPMREAFtwz1mpp9ZhDCW6SF+njG7fBKcjz8OLcy15LXiTGc268ewtQqTMjPQlm1n2C6hGccGAIlMibQJo3KZHlTs125FUzDpTVgdlei6vU7M+gmfRSZed00J6jC04/qMR1tnV3HME3np7eRTKTA6Ts+zBwEvkbCetSkCgYEA4NY5iSBO1ybouIecDdD15uI2ItLPCBNMzu7IiK7IygIzuf+SyKyjhtFSR4vEi0gScOM7UMlwCMOVU10e4nMDknIWCDG9iFvmIEkGHGxgRrN5hX1Wrq74wF212lvvagH1IVWSHa8cVpMe+UwKu5Q1h4yzuYt6Q9wPQ7Qtn5emBE0CgYB2syispMUA9GnsqQii0Xhj9nAEWaEzhOqhtrzbTs5TIkoA4Yr3BkBY5oAOdjhcRBWZuJ0XMrtaKCKqCEAtW+CYEKkGXvMOWcHbNkkeZwv8zkQ73dNRqhFnjgVn3RDNyV20uteueK23YNLkQP+KV89fnuCpdcIw9joiqq/NYuIHoQKBgB5WaZ8KH/lCA8babYEjv/pubZWXUl4plISbja17wBYZ4/bl+F1hhhMr7Wk//743dF2NG7TT6W0VTvHXr9IoaMP65uQmKgfbNpsGn294ZClGEFClz+t0KpZyTpZvL0fjibr8u+GLfkxkP5qt2wjif7KRlrKjklTTva+KAVn2cW1FAoGBAMkX9ekIwhx/7uY6ndxKl8ZMDerjr6MhV0b08hHp3RxHbYVbcpN0UKspoYvZVgHwP18xlDij8yWRE2fapwgi4m82ZmYlg0qqJmyqIU9vBB3Jow903h1KPQrkmQEZxJ/4H8yrbgVf2HT+WUfjTFgaDZRl01bI3YkydCw91/Ub9HU6
  public-key: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA0lOqMuPLCVusc6szklNXQL1FHhSkEgR7An+8BllBqTsRHM4bRYosseGFCbYPn8r8FsWuMDtxp0CwTyMQR2PCbJ740DdpbE1KC6jAfZxqcBete7gP0tooJtbvnA6X4vNpG4ukhtUoN9DzNOO0eqMU0Rgyy5HjERdYEWkwTNB30i9I+nHFOSj4MGLBSxNlnuo3keeomCRgtimCx+L/K3HNo0QHTG1J7RzLVAchfQT0lu3pUJ8kB+UM6/6NG+fVyysJyRZ9gadsr4gvHHckw8oUBp2tHvqBEkEdY+rt1Mf5jppt7JUV7HAPLB/qR5jhALY2FX/8MN+lPLmb/nLQQichVQIDAQAB

# Default values available for creation of entities
default:
  user:
    # flag to automatically register first user as an admin
    firstUserAsAdmin: true
    type: USER
    status: APPROVED

initialization:
  enabled: false
  applications:
    - name: my-app
      type: ADMIN
      clientId: myClientId
      clientSecret: myClientSecret123
      redirectUri: https://example.org  # optional
      description: Some description about this application  # optional

broker:
  token:
    config:
      public-key:
---
###############################################################################
# Profile - "jks"
###############################################################################
spring:
  config:
    activate:
      on-profile: jks

token:
  key-store: src/main/resources/ego-jwt.jks
  key-alias: ego-jwt
  keystore-password: eG0tistic@lly

---
###############################################################################
# Profile - "auth"
###############################################################################
spring:
  config:
    activate:
      on-profile: auth

# security
auth:
  token:
    prefix: Bearer

# Logging settings.
logging:
  console:
    enabled: true
    threshold: ALL
  loggers:
    "org.skife.jdbi.v2": TRACE

---
###############################################################################
# Profile - "demo"
###############################################################################
spring:
  config:
    activate:
      on-profile: grpc

grpc:
  port: 50051

---
###############################################################################
# Profile - "demo"
###############################################################################
spring:
  config:
    activate:
      on-profile: demo
---
###############################################################################
# Profile - "test"
###############################################################################
spring:
  config:
    activate:
      on-profile: test

# To log the httpRequests and httpResponses for the controllers, set to true
logging.test.controller.enable: false

spring.datasource:
  driver-class-name: org.testcontainers.jdbc.ContainerDatabaseDriver
  url: jdbc:tc:postgresql:12.6://localhost:5432/ego?TC_INITFUNCTION=bio.overture.ego.test.FlywayInit::initTestContainers

  username: postgres
  password:
  max-active: 1000
  max-idle: 10
  min-idle: 1
